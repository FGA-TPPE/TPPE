package testes;
import static org.junit.Assert.*;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.junit.Test;
import aplication.Parser;
import aplication.Reader;
import exceptions.ArquivoNaoEncontrado;
public class TesteLerArquivo {
	
	@Test
	public void TesteLerArquivoAnalysisMemory() throws ArquivoNaoEncontrado {
		Parser parser = new Parser();
		Reader reader = new Reader(parser);
		
		@SuppressWarnings("serial")
		List<List<Double>> array = new ArrayList<List<Double>>() {{
 /*0*/		    add(Arrays.asList(34.63005828857422, 34.62224578857422, 34.62224578857422, 34.62224578857422,34.62224578857422,34.62224578857422,34.62224578857422,34.62224578857422,34.62224578857422,34.62224578857422,34.62224578857422));
 /*1*/			add(Arrays.asList(35.59007263183594,35.59007263183594,35.59007263183594,35.59007263183594,35.59007263183594,35.59007263183594,35.59007263183594,35.59007263183594,35.59007263183594,35.59007263183594,35.59007263183594));
 /*2*/			add(Arrays.asList(35.59031677246094,35.59031677246094,35.55113220214844,35.537513732910156,35.55113220214844,35.55113220214844,35.53749084472656,35.59031677246094,35.59031677246094,35.55113220214844,35.553192138671875));
 /*3*/			add(Arrays.asList(36.65733337402344,36.65733337402344,36.65733337402344,36.65733337402344,36.65733337402344,36.65733337402344,36.65733337402344,36.65733337402344,36.65733337402344,36.65733337402344,36.65733337402344));
 /*4*/			add(Arrays.asList(37.63884735107422,37.63884735107422,37.63884735107422,37.63884735107422,37.63884735107422,37.63884735107422,37.63884735107422,37.63884735107422,37.63884735107422,37.63884735107422,37.63884735107422));
 /*5*/			add(Arrays.asList(39.574554443359375,39.574554443359375,39.537864685058594,39.574554443359375,39.574554443359375,39.574554443359375,39.574554443359375,39.574554443359375,39.574554443359375,39.574554443359375,39.574554443359375));
 /*6*/			add(Arrays.asList(41.617401123046875,41.617401123046875,41.617401123046875,41.617401123046875,41.617401123046875,41.617401123046875,41.617401123046875,41.617401123046875,41.617401123046875,41.617401123046875,41.617401123046875));
 /*7*/			add(Arrays.asList(41.617401123046875,41.617401123046875,41.617401123046875,41.617401123046875,41.617401123046875,41.617401123046875,41.617401123046875,41.617401123046875,41.617401123046875,41.617401123046875,41.617401123046875));
 				add(Arrays.asList(41.617401123046875,41.617401123046875,41.617401123046875,41.617401123046875,41.617401123046875,41.617401123046875,41.617401123046875,41.617401123046875,41.617401123046875,41.617401123046875,41.617401123046875));
 				add(Arrays.asList(44.65733337402344,44.65733337402344,44.65733337402344,44.65733337402344,44.65733337402344,44.65733337402344,44.65733337402344,44.65733337402344,44.65733337402344,44.65733337402344,44.65733337402344));
 				add(Arrays.asList(49.617401123046875,49.617401123046875,49.617401123046875,49.617401123046875,49.617401123046875,49.617401123046875,49.617401123046875,49.617401123046875,49.617401123046875,49.617401123046875,49.617401123046875));
 				add(Arrays.asList(27.553634643554688,27.553665161132812,27.553207397460938,27.553665161132812,27.55321502685547,27.55315399169922,27.553268432617188,27.553207397460938,27.55127716064453,27.553184509277344,27.553665161132812));
 				add(Arrays.asList(27.53746795654297,27.537437438964844,27.53839111328125,27.537437438964844,27.537437438964844,27.53746795654297,27.53746795654297,27.53839111328125,27.537460327148438,27.53746795654297,27.537460327148438));
 				add(Arrays.asList(46.99834442138672,47.094459533691406,47.07793426513672,46.91382598876953,47.08573913574219,47.082122802734375,47.079925537109375,47.071144104003906,46.99921417236328,47.090492248535156,46.910987854003906));
 				add(Arrays.asList(85.93535614013672,86.41481018066406,87.74950408935547,86.42205810546875,88.19488525390625,86.57553100585938,85.738037109375,86.074951171875,86.42327880859375,86.7900390625,85.97779083251953));
 				add(Arrays.asList(265.6123046875,275.25634765625,273.25341796875,273.697265625,265.091796875,266.962890625,271.42724609375,265.06201171875,265.19482421875,267.552734375,275.07666015625));
 				add(Arrays.asList(619.75732421875,585.64697265625,597.697265625,617.611328125,611.6953125,609.8193359375,588.79931640625,617.62646484375,617.7587890625,613.75927734375,609.697265625));
 				add(Arrays.asList(292.1605224609375,298.0877914428711,259.40924072265625,296.4632568359375,294.85009765625,306.47003173828125,294.8548583984375,311.5275344848633,301.19384765625,294.99249267578125,288.36924743652344));
 				add(Arrays.asList(789.6953125,1037.697265625,1525.6953125,1293.697265625,1441.6005859375,805.6953125,1487.6953125,1605.6953125,1397.697265625,647.6953125,1433.10009765625));
 				add(Arrays.asList(2545.6953125,2563.697265625,2507.6953125,2415.6953125,2637.697265625,2477.697265625,2579.6953125,2359.697265625,2575.697265625,2065.697265625,2437.6953125));
 				add(Arrays.asList(4891.6953125,4865.6953125,4861.6953125,4573.6953125,4837.6953125,4523.6953125,4865.6953125,4855.6953125,4559.697265625,4829.697265625,4421.6953125));
		}};
		
		
		

		
		reader.lerArquivo("arquivos/analysisMemory.out","double");
		
		assertEquals(array, reader.getParser().getBufferDouble());
	}
	
	@Test
	public void TesteLerArquivoAnalysisTime() throws ArquivoNaoEncontrado {
		Parser parser = new Parser();
		@SuppressWarnings("serial")
		List<List<Integer>> array = new ArrayList<List<Integer>>() {{
			add(Arrays.asList(1110, 3200, 934, 2310, 3178, 4009, 737, 3121, 1976, 2573, 6291));
			 add(Arrays.asList(413, 577, 410, 584, 866, 1075, 400, 701, 506, 720, 539));
			 add(Arrays.asList(455, 690, 500, 456, 668, 726, 435, 580, 864, 444, 692));
			 add(Arrays.asList(420, 561, 429, 564, 601, 627, 410, 496, 604, 750, 739));
			 add(Arrays.asList(431,619,487,682,607,702,413,779,456,505,537));
			 add(Arrays.asList(430, 475, 473, 857, 606, 848, 437, 490, 479, 671, 674));
			 add(Arrays.asList(476, 647, 504, 556, 535, 722, 480, 529, 475, 643, 688));
			 add(Arrays.asList(497, 475, 609, 578, 971, 496, 471, 708, 490, 618, 498));
			 add(Arrays.asList(535, 542, 491, 638, 481, 765, 481, 487, 535, 1015, 652));
			 add(Arrays.asList(558, 584, 563, 577, 645, 1061, 513, 523, 540, 612, 571));
			 add(Arrays.asList(656, 705, 627, 943, 662, 728, 652, 628, 639, 660, 634));
			 add(Arrays.asList(886, 1175, 844, 893, 1096, 1292, 854, 1014, 884, 1024, 862));
			 add(Arrays.asList(2461, 2524, 2364, 2518, 2420, 2394, 2435, 2403, 2386, 2673, 2497));
			 add(Arrays.asList(2291, 2280, 2272, 2379, 2281, 2258, 2305, 2308, 2320, 2275, 2305));
			 add(Arrays.asList(4418, 4528, 4370, 4366, 4379, 4435, 4497, 4765, 4295, 4523, 4515));
			 add(Arrays.asList(8717, 8814, 8604, 8670, 8799, 8472, 8742, 8687, 8792, 8865, 8581));
			 add(Arrays.asList(18237, 17831, 17772, 17577, 18187, 17387, 17879, 17701, 18384, 17701, 18394));
			 add(Arrays.asList(39222, 39442, 40082, 40192, 39168, 39137, 40017, 38000, 39967, 39049, 38238));
			 add(Arrays.asList(120085, 118258, 119943, 116758, 119649, 121215, 113909, 114644, 115771, 107854, 115332));
			 add(Arrays.asList(425823, 421734,	420526, 411620, 414876, 412099, 423135, 421929, 408435, 426251, 412203));
			 add(Arrays.asList(892820, 850745, 878276, 877227, 876456, 866763, 858800, 860945, 868931, 883683, 867026));
			 
		}};
		
		parser.lerArq("arquivos/analysisTime.out","inteiro");

		assertEquals(array, parser.getBufferInteger());
	}


	

	@Test(expected=ArquivoNaoEncontrado.class)
	public void TesteLerArquivoInexistenteInteiro() throws ArquivoNaoEncontrado {
		Parser parser = new Parser();

		parser.lerArq("arquivos/arquivoc.out","inteiro");
	}
	
	@Test(expected=ArquivoNaoEncontrado.class)
	public void TesteLerArquivoInexistenteDouble() throws ArquivoNaoEncontrado {
		Parser parser = new Parser();

		parser.lerArq("arquivos/arquivoc.out","double");
	}


}